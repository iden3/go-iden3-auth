// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iden3/go-iden3-auth/state (interfaces: StateGetter)

// Package mock_state is a generated GoMock package.
package mock_state

import (
	big "math/big"
	reflect "reflect"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	gomock "github.com/golang/mock/gomock"
	abi "github.com/iden3/contracts-abi/state/go/abi"
)

// MockStateGetter is a mock of StateGetter interface.
type MockStateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStateGetterMockRecorder
}

// MockStateGetterMockRecorder is the mock recorder for MockStateGetter.
type MockStateGetterMockRecorder struct {
	mock *MockStateGetter
}

// NewMockStateGetter creates a new mock instance.
func NewMockStateGetter(ctrl *gomock.Controller) *MockStateGetter {
	mock := &MockStateGetter{ctrl: ctrl}
	mock.recorder = &MockStateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateGetter) EXPECT() *MockStateGetterMockRecorder {
	return m.recorder
}

// GetStateInfoByIdAndState mocks base method.
func (m *MockStateGetter) GetStateInfoByIdAndState(arg0 *bind.CallOpts, arg1, arg2 *big.Int) (abi.IStateStateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateInfoByIdAndState", arg0, arg1, arg2)
	ret0, _ := ret[0].(abi.IStateStateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateInfoByIdAndState indicates an expected call of GetStateInfoByIdAndState.
func (mr *MockStateGetterMockRecorder) GetStateInfoByIdAndState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateInfoByIdAndState", reflect.TypeOf((*MockStateGetter)(nil).GetStateInfoByIdAndState), arg0, arg1, arg2)
}
