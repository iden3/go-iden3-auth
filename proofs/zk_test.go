package proofs

import (
	"os"
	"testing"

	"github.com/iden3/go-circuits"
	"github.com/iden3/go-rapidsnark/types"
	"github.com/iden3/iden3comm/protocol"
	"github.com/stretchr/testify/assert"
)

func TestVerifyProof(t *testing.T) {

	var err error
	proofMessage := protocol.ZeroKnowledgeProofResponse{
		ZKProof: types.ZKProof{
			Proof: &types.ProofData{
				A: []string{
					"553107328829552739356143409585452140182890751904479913169932084064672719342",
					"6414164353444149373251860755937247195440148247977996873464801175864488600187",
					"1",
				},
				B: [][]string{
					{
						"1848793935234157552257829088144777701654345181741201635414140644827541802063",
						"2690669073070388025072668654408175248782610232957303774118462170802712453278",
					},
					{
						"5055095222783166923422204514647227537440069458420869376587492848653363173060",
						"483202060159956789222074171559922542038004267623840366839963428406782614282",
					},
					{
						"1",
						"0",
					}},
				C: []string{
					"1629496919538541173933472398151128146708748529834203088117936150271440668414",
					"14513257679897863036989550655794291459834670206310872236326790971807658823114",
					"1",
				},
				Protocol: "groth16",
			},
			PubSignals: []string{
				"1",
				"26337405203610566029241995866156151469433315212067050574696144339180786177",
				"10",
				"26337405203610566029241995866156151469433315212067050574696144339180786177",
				"21498905153686139720023221743570456290445230580677931307974644282469683226010",
				"21498905153686139720023221743570456290445230580677931307974644282469683226010",
				"1670860707",
				"336615423900919464193075592850483704600",
				"0",
				"17002437119434618783545694633038537380726339994244684348913844923422470806844",
				"0",
				"5",
				"840",
				"120",
				"340",
				"509",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0",
			},
		},
	}
	proofMessage.CircuitID = string(circuits.AtomicQueryMTPV2CircuitID)

	verificationKey, err := os.ReadFile("../testdata/credentialAtomicQueryMTPV2.json")
	assert.NoError(t, err)

	proofMessage.ID = 1

	err = VerifyProof(proofMessage, verificationKey)
	assert.Nil(t, err)
}
