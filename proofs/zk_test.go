package proofs

import (
	"os"
	"testing"

	"github.com/iden3/go-circuits"
	"github.com/iden3/go-rapidsnark/types"
	"github.com/iden3/iden3comm/protocol"
	"github.com/stretchr/testify/assert"
)

func TestVerifyProof(t *testing.T) {

	var err error
	proofMessage := protocol.ZeroKnowledgeProofResponse{ZKProof: types.ZKProof{
		Proof: &types.ProofData{
			A: []string{
				"16211956402207631381176468379728798423667930255981755004420230738449664690789",
				"9004778740389807084354971283763172719260701729052628681856488259422542142246",
				"1",
			},
			B: [][]string{
				{
					"1867213032783297476060755068211475075858961965863624879298845829586299184181",
					"5447031243269227173277400395615691016669381340191201590713671817196393706107",
				},
				{
					"17580517094023255178200218409218051221258751870069962961809730586923792493375",
					"12852098816013633547562042667268205467432181507727121675212229110928894118845",
				},
				{
					"1",
					"0",
				}},
			C: []string{
				"11024440282133310283168486346789455438597411678641019832906508201996664465537",
				"16945790247011207441581463668502066293637526289646384880071951785028068863319",
				"1",
			},
			Protocol: "groth16",
		},
		PubSignals: []string{
			"326950639933209984096878120644736617046275723209353386907645117784580620769",
			"18656147546666944484453899241916469544090258810192803949522794490493271005313",
			"1",
			"14473004656059607514898969789987687802517264655755422269466843781861921926818",
			"425907143642375002864917990538284220073575168146768873727835628763900412385",
			"14473004656059607514898969789987687802517264655755422269466843781861921926818",
			"1642074362",
			"106590880073303418818490710639556704462",
			"2",
			"5",
			"840",
			"120",
			"340",
			"509",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
		},
	}}
	proofMessage.CircuitID = string(circuits.AtomicQueryMTPCircuitID)

	verificationKey, err := os.ReadFile("../testdata/credentialAtomicQueryMTP.json")
	assert.NoError(t, err)

	proofMessage.ID = 1

	err = VerifyProof(proofMessage, verificationKey)
	assert.Nil(t, err)
}
